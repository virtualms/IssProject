/* 
 * ================================================================================
 * waiterwalker.qak
 * VERSION June 1, 2020 
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */ 
System waiterwalker 
mqttBroker "localhost": 1883 eventTopic "unibo/polar"

//Event    walkerstarted   : walkerstarted(X)

Request  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)
Reply	 walkbreak  : walkbreak(X,Y)  

Dispatch cmd       : cmd(MOVE)
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

//Context ctxwaiter ip [host="127.0.0.1" port=8090] 
Context ctxtearoom_dummy  ip [host="localhost"      port=8030]     
Context ctxbasicrobot     ip [host="127.0.0.1"   port=8020]    

ExternalQActor basicrobot    context ctxbasicrobot
 
QActor waiterwalker context ctxtearoom_dummy{  
[#
	var XT = "0"
	var YT = "0" 
	var CurrentPlannedMove = ""
	var StepTime    	   = 355L
	val PauseTime          = 250L
	val BackTime           = 2 * StepTime / 3
	var obstacleFound      = false  
	
	val inmapname          		= "teaRoomExplored" 
#]

	State s0 initial {	     
		
		run itunibo.planner.plannerUtil.initAI()
		solve( consult("tearoomkb.pl")	 )
  		
 		run itunibo.planner.plannerUtil.loadRoomMap( inmapname ) 		
 		run itunibo.planner.plannerUtil.showCurrentRobotState()	
 		
 		forward basicrobot -m cmd : cmd(l)
		delay 500
		forward basicrobot -m cmd : cmd(r)    
		delay 500
		//emit walkerstarted : walkerstarted(0)
		

		
		println("&&&  waiterwalker STARTS")
	}	
	Goto waitCmd   
	 
	State waitCmd {	     
 		println("&&&  waiterwalker waits for a command 'movetoCell'")
	}	
	Transition t0 whenRequest movetoCell -> walk
 	
	State walk{
		printCurrentMessage
		onMsg( movetoCell : movetoCell(X,Y) ){
			[# XT = payloadArg(0)
			   YT = payloadArg(1)			  
			 #]
			println("&&&  waiterwalker  | MOVING to ($XT,$YT)")
			run itunibo.planner.plannerUtil.planForGoal("$XT","$YT")
		}
	}
	Goto execPlannedMoves if[# itunibo.planner.plannerUtil.existActions() #] else noPlan

	State noPlan{
		println("&&&  waiterwalker | NO PLAN FOUND for MOVING to ($XT,$YT)")
		replyTo movetoCell with walkbreak : walkbreak( $XT,$YT )
	}
	Goto waitCmd
	
/*
 * Execute the plan
 */					  
 	State execPlannedMoves{ 
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		//println("waiterwalker | doing move $CurrentPlannedMove")
 		delayVar PauseTime
 	}
 	Goto wMove if [# CurrentPlannedMove == "w" #] else otherPlannedMove
 
 	State wMove {  
		request basicrobot -m step : step( $StepTime  )
 	} 	
 	Transition t0   whenReply stepdone   -> stepDone   
					whenReply stepfail   -> stepFailed 
	 
 	State stepDone{  
 		//updateResource [# itunibo.planner.plannerUtil.getMapOneLine() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
  	}
	Goto execPlannedMoves if [# CurrentPlannedMove.length > 0 #] else sendSuccessAnswer
		
	State stepFailed{  //has found an obstacle 
	    [# obstacleFound = true #]
 		println("waiterwalker | stepFailed")
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# val D = payloadArg(0).toLong()  ; val Dt = Math.abs(StepTime-D); val BackT = D/2 #] 
			println("waiterwalker stepFail D= $D, BackTime = ${BackTime}")
			if [# D > BackTime #] {    
				forward basicrobot -m cmd : cmd( s )
				delayVar BackT
				forward basicrobot -m cmd : cmd( h )
			}	 
 		}
	    run itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection() 			    
 	}   
	Goto sendFailureAnswer
	
 	State otherPlannedMove{
  		if [# CurrentPlannedMove == "l" || CurrentPlannedMove == "r"  #]{
  			forward basicrobot -m cmd : cmd($CurrentPlannedMove)
 			run itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove" )
  		} 
 	}   
 	Goto execPlannedMoves if [# CurrentPlannedMove.length > 0 #] else sendSuccessAnswer 
 
/*
 * Answers  
 */ 
 	State sendSuccessAnswer{
	     	println("&&&  waiterwalker POINT ($XT,$YT) REACHED")
	     	run itunibo.planner.plannerUtil.showCurrentRobotState()
	     	replyTo movetoCell with atcell : atcell($XT,$YT) 					
	}
	Goto waitCmd  

	State sendFailureAnswer{
	    println("&&&  waiterwalker FAILS")
	    [# val Curx = itunibo.planner.plannerUtil.getPosX()
	       val Cury = itunibo.planner.plannerUtil.getPosY()	
	    #]
  		run itunibo.planner.plannerUtil.showCurrentRobotState()
	    replyTo movetoCell with walkbreak : walkbreak( $Curx, $Cury ) 					
	}
	Goto waitCmd
       
 }
 
