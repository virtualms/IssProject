/* Generated by AN DISI Unibo */ 
package it.unibo.waiterbody

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiterbody ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var GoHomeTime = 5000L
				
				var ID = 0
				var TABLE = 0
				var TEA = 0
				
				var StateTable = ""
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						updateResourceRep( "home"  
						)
						println("waiterbody | home")
						delay(500) 
					}
					 transition(edgeName="t014",targetState="goToClear",cond=whenReply("tableToClear"))
					transition(edgeName="t015",targetState="goToSanitize",cond=whenReply("tableToSanitize"))
					transition(edgeName="t016",targetState="goToEntrance",cond=whenDispatch("newClient"))
					transition(edgeName="t017",targetState="goToTakeOrder",cond=whenRequest("readyToOrder"))
					transition(edgeName="t018",targetState="takeTea",cond=whenReply("teaReady"))
					transition(edgeName="t019",targetState="checkTableState",cond=whenRequest("readyToPay"))
				}	 
				state("wait") { //this:State
					action { //it:State
						updateResourceRep( "wait"  
						)
						println("waiterbody | wait")
						delay(500) 
						stateTimer = TimerActor("timer_wait", 
							scope, context!!, "local_tout_waiterbody_wait", GoHomeTime )
					}
					 transition(edgeName="t020",targetState="goToHome",cond=whenTimeout("local_tout_waiterbody_wait"))   
					transition(edgeName="t021",targetState="goToClear",cond=whenReply("tableToClear"))
					transition(edgeName="t022",targetState="goToSanitize",cond=whenReply("tableToSanitize"))
					transition(edgeName="t023",targetState="goToEntrance",cond=whenDispatch("newClient"))
					transition(edgeName="t024",targetState="goToTakeOrder",cond=whenRequest("readyToOrder"))
					transition(edgeName="t025",targetState="takeTea",cond=whenReply("teaReady"))
					transition(edgeName="t026",targetState="checkTableState",cond=whenRequest("readyToPay"))
				}	 
				state("goToEntrance") { //this:State
					action { //it:State
						updateResourceRep( "goToEntrance"  
						)
						println("waiterbody | goToEntrance")
						if( checkMsgContent( Term.createTerm("newClient(ID,TABLE)"), Term.createTerm("newClient(ID,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								   				ID = payloadArg(0).toString().toInt() 
								   				TABLE = payloadArg(1).toString().toInt() 
						}
						request("moveToEntrance", "moveToEntrance(OK)" ,"walker" )  
					}
					 transition(edgeName="t027",targetState="convoyToTable",cond=whenReply("moveOk"))
				}	 
				state("convoyToTable") { //this:State
					action { //it:State
						updateResourceRep( "convoyToTable " + TABLE  
						)
						println("waiterbody | convoyToTable")
						request("moveToTable", "moveToTable($TABLE)" ,"walker" )  
					}
					 transition(edgeName="t028",targetState="atTable",cond=whenReply("moveOk"))
				}	 
				state("atTable") { //this:State
					action { //it:State
						updateResourceRep( "atTable " + TABLE  
						)
						println("waiterbody | atTable")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("goToClear") { //this:State
					action { //it:State
						println("waiterbody | goToClear")
						if( checkMsgContent( Term.createTerm("tableToClear(TABLE)"), Term.createTerm("tableToClear(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								   				TABLE = payloadArg(0).toString().toInt() 
								request("moveToTable", "moveToTable($TABLE)" ,"walker" )  
						}
						updateResourceRep( "goToClear " + TABLE  
						)
					}
					 transition(edgeName="t029",targetState="clear",cond=whenReply("moveOk"))
				}	 
				state("clear") { //this:State
					action { //it:State
						updateResourceRep( "clear " + TABLE  
						)
						println("waiterbody | clear")
						delay(5000) 
						request("updateClear", "updateClear($TABLE)" ,"tearoom" )  
						request("tableToClean", "tableToClean(OK)" ,"tearoom" )  
					}
					 transition(edgeName="t030",targetState="wait",cond=whenReply("clearUpdated"))
				}	 
				state("goToSanitize") { //this:State
					action { //it:State
						println("waiterbody | goToSanitize")
						if( checkMsgContent( Term.createTerm("tableToSanitize(TABLE)"), Term.createTerm("tableToSanitize(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								   				TABLE = payloadArg(0).toString().toInt() 
								request("moveToTable", "moveToTable($TABLE)" ,"walker" )  
						}
						updateResourceRep( "goToSanitize " + TABLE  
						)
					}
					 transition(edgeName="t031",targetState="sanitize",cond=whenReply("moveOk"))
				}	 
				state("sanitize") { //this:State
					action { //it:State
						updateResourceRep( "sanitize " + TABLE  
						)
						println("waiterbody | sanitize")
						delay(5000) 
						request("updateSanitize", "updateSanitize($TABLE)" ,"tearoom" )  
						request("tableToClean", "tableToClean(OK)" ,"tearoom" )  
					}
					 transition(edgeName="t032",targetState="wait",cond=whenReply("sanitizeUpdated"))
				}	 
				state("checkTableState") { //this:State
					action { //it:State
						println("waiterbody | checkTableState")
						if( checkMsgContent( Term.createTerm("readyToPay(TABLE)"), Term.createTerm("readyToPay(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
										 	TABLE = payloadArg(0).toString().toInt() 
						}
						if(  TABLE == 1  
						 ){forward("stopTime", "stopTime(now)" ,"timer1" ) 
						}
						else
						 {forward("stopTime", "stopTime(now)" ,"timer2" ) 
						 }
						request("checkTableState", "checkTableState($TABLE)" ,"tearoom" )  
					}
					 transition(edgeName="t033",targetState="checkState",cond=whenReply("tableState"))
				}	 
				state("checkState") { //this:State
					action { //it:State
						println("waiterbody | checkState")
						if( checkMsgContent( Term.createTerm("tableState(OK)"), Term.createTerm("tableState(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
										 	StateTable = payloadArg(0).toString()
						}
					}
					 transition( edgeName="goto",targetState="goToCollect", cond=doswitchGuarded({ StateTable == "taken"  
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( StateTable == "taken"  
					) }) )
				}	 
				state("goToCollect") { //this:State
					action { //it:State
						println("waiterbody | goToCollect")
						request("moveToTable", "moveToTable($TABLE)" ,"walker" )  
						updateResourceRep( "goToCollect " + TABLE  
						)
					}
					 transition(edgeName="t034",targetState="collect",cond=whenReply("moveOk"))
				}	 
				state("collect") { //this:State
					action { //it:State
						updateResourceRep( "collect " + TABLE  
						)
						println("waiterbody | collect")
						answer("readyToPay", "atTable", "atTable($TABLE)"   )  
					}
					 transition(edgeName="t035",targetState="goToExit",cond=whenDispatch("moneyCollected"))
				}	 
				state("goToExit") { //this:State
					action { //it:State
						updateResourceRep( "goToExit"  
						)
						println("waiterbody | goToExit")
						request("updateDirty", "updateDirty($TABLE)" ,"tearoom" )  
						request("moveToExit", "moveToExit(OK)" ,"walker" )  
					}
					 transition(edgeName="t036",targetState="exit",cond=whenReply("moveOk"))
				}	 
				state("exit") { //this:State
					action { //it:State
						println("waiterbody | exit")
						request("tableToClean", "tableToClean(OK)" ,"tearoom" )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("goToTakeOrder") { //this:State
					action { //it:State
						println("waiterbody | goToTakeOrder")
						if( checkMsgContent( Term.createTerm("readyToOrder(TABLE)"), Term.createTerm("readyToOrder(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											 	TABLE = payloadArg(0).toString().toInt() 
								request("moveToTable", "moveToTable($TABLE)" ,"walker" )  
						}
						updateResourceRep( "goToTakeOrder " + TABLE  
						)
					}
					 transition(edgeName="t037",targetState="takeOrder",cond=whenReply("moveOk"))
				}	 
				state("takeOrder") { //this:State
					action { //it:State
						updateResourceRep( "takeOrder " + TABLE  
						)
						println("waiterbody | takeOrder")
						answer("readyToOrder", "atTable", "atTable"   )  
					}
					 transition(edgeName="t038",targetState="sendOrder",cond=whenDispatch("order"))
				}	 
				state("sendOrder") { //this:State
					action { //it:State
						updateResourceRep( "sendOrder"  
						)
						println("waiterbody | sendOrder")
						if( checkMsgContent( Term.createTerm("order(TEA,TABLE)"), Term.createTerm("order(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											 	TEA  = payloadArg(0).toString().toInt() 
											 	TABLE = payloadArg(1).toString().toInt() 
								request("makeTea", "makeTea($TEA,$TABLE)" ,"barman" )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("takeTea") { //this:State
					action { //it:State
						updateResourceRep( "takeTea"  
						)
						println("waiterbody | takeTea")
						if( checkMsgContent( Term.createTerm("teaReady(TEA,TABLE)"), Term.createTerm("teaReady(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											 	TEA  = payloadArg(0).toString().toInt() 
											 	TABLE = payloadArg(1).toString().toInt() 
						}
						request("moveToBarman", "moveToBarman(OK)" ,"walker" )  
					}
					 transition(edgeName="t039",targetState="serve",cond=whenReply("moveOk"))
				}	 
				state("serve") { //this:State
					action { //it:State
						updateResourceRep( "serve " + TABLE  
						)
						println("waiterbody | serve")
						request("moveToTable", "moveToTable($TABLE)" ,"walker" )  
					}
					 transition(edgeName="t040",targetState="startTimer",cond=whenReply("moveOk"))
				}	 
				state("startTimer") { //this:State
					action { //it:State
						println("waiterbody | startTimer")
						if(  TABLE == 1  
						 ){forward("startTimer", "startTimer(OK)" ,"timer1" ) 
						}
						else
						 {forward("startTimer", "startTimer(OK)" ,"timer2" ) 
						 }
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("goToHome") { //this:State
					action { //it:State
						updateResourceRep( "goToHome"  
						)
						println("waiterbody | goToHome")
						println("waiterbody | going to home")
						request("moveToHome", "moveToHome(HOME)" ,"walker" )  
					}
					 transition(edgeName="t041",targetState="home",cond=whenReply("moveOk"))
				}	 
			}
		}
}
