/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TABLE = 0
				var TEA = 0
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Barman | s0")
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						updateResourceRep( "wait"  
						)
						println("Barman | waiting")
					}
					 transition(edgeName="t042",targetState="makingTea",cond=whenRequest("makeTea"))
				}	 
				state("makingTea") { //this:State
					action { //it:State
						updateResourceRep( "makingTea"  
						)
						println("Barman | making tea")
						if( checkMsgContent( Term.createTerm("makeTea(TEA,TABLE)"), Term.createTerm("makeTea(TEA,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											 	TEA  = payloadArg(0).toString().toInt() 
											 	TABLE = payloadArg(1).toString().toInt() 
								delay(4000) 
								answer("makeTea", "teaReady", "teaReady($TEA,$TABLE)"   )  
						}
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
