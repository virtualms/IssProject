/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		  var StepTime      = 0L
		  var StartTime     = 0L    
		  var Duration      = 0L    
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("--basicRobot | s0")
						unibo.robot.robotSupport.create(myself ,"basicrobotConfig.json" )
						  //For real robots
						 			var robotsonar = context!!.hasActor("robotsonar")  
						 			if( robotsonar != null ){  
						 				//ACTIVATE THE DATA SOURCE robotsonar
						 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
						 				//SET THE PIPE
						 				robotsonar.
						 				subscribeLocalActor("datacleaner").
						 				subscribeLocalActor("distancefilter").
						 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
						 			}
						updateResourceRep( "stopped"  
						)
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("--basicRobot | work")
					}
					 transition(edgeName="t158",targetState="execcmd",cond=whenDispatch("cmd"))
					transition(edgeName="t159",targetState="doStep",cond=whenRequest("step"))
					transition(edgeName="t160",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("execcmd") { //this:State
					action { //it:State
						println("--basicRobot | execcmd")
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								unibo.robot.robotSupport.move( payloadArg(0)  )
								updateResourceRep( "movedone(${payloadArg(0)})"  
								)
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStep") { //this:State
					action { //it:State
						println("--basicRobot | doStep")
						if( checkMsgContent( Term.createTerm("step(TIME)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									StepTime = payloadArg(0).toLong() 	 
								updateResourceRep( "step(${StepTime})"  
								)
								unibo.robot.robotSupport.move( "w"  )
								StartTime = getCurrentTime()
						}
						stateTimer = TimerActor("timer_doStep", 
							scope, context!!, "local_tout_basicrobot_doStep", StepTime )
					}
					 transition(edgeName="t061",targetState="stepPerhapsDone",cond=whenTimeout("local_tout_basicrobot_doStep"))   
					transition(edgeName="t062",targetState="stepFail",cond=whenEvent("obstacle"))
				}	 
				state("stepPerhapsDone") { //this:State
					action { //it:State
						println("--basicRobot | stepPerhapsDone")
						unibo.robot.robotSupport.move( "h"  )
						stateTimer = TimerActor("timer_stepPerhapsDone", 
							scope, context!!, "local_tout_basicrobot_stepPerhapsDone", StepTime )
					}
					 transition(edgeName="t063",targetState="stepDone",cond=whenTimeout("local_tout_basicrobot_stepPerhapsDone"))   
					transition(edgeName="t064",targetState="stepFailDetected",cond=whenEvent("obstacle"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						println("--basicRobot | stepDone")
						unibo.robot.robotSupport.move( "h"  )
						updateResourceRep( "stepDone($StepTime)"  
						)
						answer("step", "stepdone", "stepdone(ok)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepFailDetected") { //this:State
					action { //it:State
						println("--basicRobot | stepFailDetected")
						answer("step", "stepfail", "stepfail($StepTime,obstacle)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						println("--basicRobot | stepFail")
						Duration = getDuration(StartTime)
						updateResourceRep( "stepFail($Duration)"  
						)
						emit("obstacle", "obstacle(unknown)" ) 
						answer("step", "stepfail", "stepfail($Duration,obstacle)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						println("--basicRobot | endwork")
						if( checkMsgContent( Term.createTerm("end(ARG)"), Term.createTerm("end(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "move(end)"  
								)
								utils.virtualRobotSupportQak.terminatevr(  )
						}
						emit("endall", "endall(normal)" ) 
						terminate(1)
					}
				}	 
			}
		}
}
