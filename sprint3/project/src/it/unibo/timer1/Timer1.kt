/* Generated by AN DISI Unibo */ 
package it.unibo.timer1

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timer1 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Timer = 30000L  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("timer1 | wait")
					}
					 transition(edgeName="t06",targetState="timer",cond=whenDispatch("startTimer"))
				}	 
				state("timer") { //this:State
					action { //it:State
						println("timer1 | timer")
						stateTimer = TimerActor("timer_timer", 
							scope, context!!, "local_tout_timer1_timer", Timer )
					}
					 transition(edgeName="t07",targetState="timeover",cond=whenTimeout("local_tout_timer1_timer"))   
					transition(edgeName="t08",targetState="wait",cond=whenDispatch("stopTime"))
				}	 
				state("timeover") { //this:State
					action { //it:State
						println("timer1 | timerover")
						request("readyToPay", "readyToPay(1)" ,"waiterbody" )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
