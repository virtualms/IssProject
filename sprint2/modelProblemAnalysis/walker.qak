System walker

//MQTT
mqttBroker "localhost": 1883 eventTopic "unibo/polar"

//MESSAGES
Request  movetoCell : movetoCell(X,Y)
Reply moveOk : moveOk(ARG)
Dispatch order: order(TEA, TABLE)

Request moveToEntrance : moveToEntrance(ARG) 
Request moveToTable : moveToTable(TABLE) 
Request moveToBarman : moveToBarman(ARG) 
Request moveToExit : moveToExit(ARG) 
Request moveToHome : moveToHome(ARG) 

Reply moveOk : moveOk(ARG)

//from waiterwalker
Reply atcell : atcell(X,Y)

//CONTEXT
Context ctxwaiterbody ip [host="localhost" port=8021]
Context ctxwalker ip [host="localhost" port=8022]
Context ctxwaiterwalker ip [host="localhost" port=8060]

//EXTERNAL
ExternalQActor waiterwalker context ctxwaiterwalker
ExternalQActor ctxwaiterbody context ctxwaiterbody

//ACTOR
QActor walker context ctxwalker{
	
	[#
		var ARG = 0
		var X_tmp		= "0"
		var Y_tmp		= "0"

		var X_home		= "0"
		var Y_home		= "0"
		
		var X_barman		= "5"
		var Y_barman		= "0"

		var X_entrancedoor  = "0"
		var Y_entrancedoor  = "4"
	
		var X_exitdoor      = "5"
		var Y_exitdoor      = "4"
 
		var X_teatable1     = "2"
		var Y_teatable1     = "2"

		var X_teatable2     = "4"
		var Y_teatable2     = "2"	
	#]
	
	State s0 initial{
		println("---walker | s0")	
	} Goto wait
	
	State wait{
		println("---walker | wait")	
	}
	Transition t0
  				  whenRequest moveToEntrance -> moveToEntrance
//  				  whenRequest moveToTable1 -> moveToTable1
//  				  whenRequest moveToTable2 -> moveToTable2 
  				  whenRequest moveToTable -> moveToTable
				  whenRequest moveToBarman -> moveToBarman 
				  whenRequest moveToExit -> moveToExit
				  whenRequest moveToHome -> moveToHome 
				  
	State moveToEntrance {
		println("---walker | moveToEntrace")	
		request waiterwalker -m movetoCell : movetoCell ($X_entrancedoor, $Y_entrancedoor)	
	} Transition t0 whenReply atcell -> respondEntrance
	
	State respondEntrance {
		println("---walker | respondEntrance")	
		replyTo moveToEntrance with moveOk : OK
	} Goto wait
	
	State moveToTable {
		println("---walker | moveToTable")	
		
		onMsg(moveToTable : moveToTable(TABLE)){
			
			[# 
				ARG = payloadArg(0).toString().toInt()
				
				if(ARG == 1){
					X_tmp = X_teatable1
					Y_tmp = Y_teatable1
				}else{
					X_tmp = X_teatable2
					Y_tmp = Y_teatable2
				}
				
			 #]
			
		}
		
		request waiterwalker -m movetoCell : movetoCell ($X_tmp, $Y_tmp)	
	} Transition t0 whenReply atcell -> respondTeaTable
	
	State respondTeaTable {
		println("---walker | respondTeaTable ")	
		replyTo moveToTable with moveOk : OK
	} Goto wait	
	
	
	
	
	State moveToBarman {
		println("---walker | moveToBarman")	
		request waiterwalker -m movetoCell : movetoCell ($X_barman, $Y_barman)	
	} Transition t0 whenReply atcell -> respondBarman
	
	State respondBarman {
		println("---walker | respondBarman")	
		replyTo moveToBarman with moveOk : OK
	} Goto wait	
	
	
	
	
	State moveToExit{
		println("---walker | moveToExit")	
		request waiterwalker -m movetoCell : movetoCell ($X_exitdoor, $Y_exitdoor)	
	} Transition t0 whenReply atcell -> respondExit
	
	State respondExit {
		println("---walker | respondExit")	
		replyTo moveToExit with moveOk : OK
	} Goto wait
	
	
	
	
	State moveToHome{
		println("---walker | moveToHome")	
		request waiterwalker -m movetoCell : movetoCell ($X_home, $Y_home)	
	} Transition t0 whenReply atcell -> respondHome
	
	State respondHome{
		println("---walker | respondHome")	
		replyTo moveToHome with moveOk : OK
	} Goto wait
	
}