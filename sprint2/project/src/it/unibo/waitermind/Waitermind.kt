/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var ID = 0
				var TIME = 0
				var TABLE = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						updateResourceRep( "wait"  
						)
						println("waiterMind | wait")
					}
					 transition(edgeName="t011",targetState="answer",cond=whenRequest("waitTime"))
				}	 
				state("answer") { //this:State
					action { //it:State
						updateResourceRep( "answer"  
						)
						println("waiterMind | answer")
						if( checkMsgContent( Term.createTerm("waitTime(ID)"), Term.createTerm("waitTime(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ID = payloadArg(0).toString().toInt() 
						}
						request("calculateTime", "calculateTime(ok)" ,"tearoom" )  
					}
					 transition(edgeName="t012",targetState="comunicate",cond=whenReply("time"))
				}	 
				state("comunicate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("time(TIME,TABLE)"), Term.createTerm("time(TIME,TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												TIME = payloadArg(0).toString().toInt()
												TABLE = payloadArg(1).toString().toInt() 	
								answer("waitTime", "waitTimeAnswer", "waitTimeAnswer($TIME)"   )  
						}
					}
					 transition( edgeName="goto",targetState="inform", cond=doswitchGuarded({ TIME == 0  
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( TIME == 0  
					) }) )
				}	 
				state("inform") { //this:State
					action { //it:State
						updateResourceRep( "inform"  
						)
						println("waiterMind | inform")
						forward("newClient", "newClient($ID,$TABLE)" ,"waiterbody" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
