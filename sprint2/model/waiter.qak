System waiter

//MESSAGES
Request waitTime: waitTime(ID) 
Reply   waitTimeAnswer: waitTime(TIME) 

Request makeTea : makeTea( TEA, TABLE ) 
Reply teaReady : teaReady( TEA , TABLE) 

Request readyToOrder: readyToOrder(TABLE) 
Reply   atTable: atTable(TABLE) 

Dispatch order: order(TEA) 

Request readyToPay: readyToPay(TABLE) 
Dispatch moneyCollected: moneyCollected(AMOUNT) 
Dispatch dirtyTable: dirtyTable(TABLE) 

Dispatch newClient: newClient(ID)

Dispatch dirtyTable: dirtyTable(TABLE)

//CONTEXT
Context ctxwaiter ip [host="localhost" port=8010]

//ACTORS
ExternalQActor barman context ctxwaiter

QActor waiter context ctxwaiter{

	
	State s0 initial{
		discardMsg Off
	}Goto home
	
	State home{
		updateResource[# "home" #]
		println("waiter | home")
		
		delay 500
		
	}Transition t0 whenMsg dirtyTable -> clean
				   whenReply teaReady -> takeTea
				   whenRequest readyToPay -> collect
				   whenRequest readyToOrder -> takeOrder   
				   whenMsg newClient -> convoyToTable
				   whenRequest waitTime -> calculateWaitTime
				   //when timer -> collect
			   	   
   	State wait{
   	   	updateResource[# "wait" #]
   		println("waiter | wait")
		
		delay 500
   		
	}Transition t0 whenTimeVar GoHomeTime -> goToHome
				   whenMsg dirtyTable -> clean
				   whenReply teaReady -> takeTea
				   whenRequest readyToPay -> collect
				   whenRequest readyToOrder -> takeOrder
				   whenMsg newClient -> convoyToTable
				   
				   whenRequest waitTime -> calculateWaitTime
				   //when timer -> collect
				   
   State calculateWaitTime{
   			[# value = calculate(...) #]
   			replyTo waitTime with waitTimeAnswer: waitTimeAnswer(value)
   }
   Goto wait
   
   State convoyToTable{
   		println("waiter | covoyToTable")
   		
   }Goto wait
   
   State clean{
   		println("waiter | clean")
   		println("waiter | cleaning the table")
   		
   		//msg(TABLE_n)
   		//clean table_n

   } Goto wait
   
   State collect{
   	   	updateResource[# "collect" #]
   		println("waiter | collect")
   		println("waiter | collecting the money")
   		
		//collect money

   }Transition t0 whenMsg moneyCollected -> goToExit
   
   State goToExit{
   	   	updateResource[# "goToExit" #]
   		println("waiter | goToExit")
   		println("waiter | convoying the client to the exit")
   		//Go to exit
   		
   }Goto wait
   
   
   State takeOrder{
   	   	updateResource[# "takeOrder" #]
   		println("waiter | takeOrder")
   		println("waiter | ready to take the order")
   		replyTo readyToOrder with atTable: atTable
		
   }Transition t0 whenMsg order -> sendOrder 
	
	
	State sendOrder{
   	   	updateResource[# "sendOrder" #]
   		println("waiter | sendOrder")
   		println("waiter | sending the order to the barman")
		onMsg(order : order(TEA, TABLE)){
			 request barman -m makeTea: makeTea($TEA, $TABLE)
		}
 		
	}Goto wait
	
	State takeTea{
   	   	updateResource[# "takeTea" #]
   		println("waiter | takeTea")
   		println("waiter | going to the barman to take the tea")
		
	}Goto serve
	
	State serve{
   	   	updateResource[# "serve" #]
   		println("waiter | serve")
   		println("waiter | going to serve the tea")
   		
	}Goto startTimer
	
	 State startTimer{
   		println("waiter | startTimer")
   		
   		//TABLE = N
   		if [# TABLE == 1 #]{
   			//start timer1
   		}
   		else{
   			//start timer2
   		}
   }Goto wait
				   
    State goToHome{
   		println("waiter | goToHome")
   		println("waiter | going to home")
   		
    }Goto home
}
