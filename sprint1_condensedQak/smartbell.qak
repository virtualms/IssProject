System smartbell

mqttBroker "localhost": 1883 eventTopic "unibo/polar"

//MESSAGES
Event newClient : newClient(OK)
Dispatch newClientWait : newClientWait(TIME)
Dispatch clientWait: clientWait(TIME)

Request clientInHall : clientInHall(msg)
Reply tempNo : tempNo(val)
Reply tempOk : tempOk(ID)

Dispatch callWaiter: callWaiter(ok)
Dispatch atTable : atTable(table)
Dispatch waiterReady : waiterReady(msg)
Dispatch order : order(tea)
Dispatch orderDelivered : orderDelivered(tea)
Dispatch paymentOk : paymentOk(bill)
Event endCons : endCons(cons)

//CONTEXT
Context ctxwaiter ip [host="127.0.0.1" port=8090] 
Context ctxsmartbell ip [host="localhost" port=8050]
//Context ctxclient ip [host="127.0.0.1" port=8040]

ExternalQActor waiter context ctxwaiter
//ExternalQActor client context ctxclient

//ACTOR
QActor smartbell context ctxsmartbell{
	
	State s0 initial{
		println("smartbell | s0")
	}
	Goto waiting 
	
	State waiting{
		println("smartbell | waiting")
	}
	Transition t0 
		whenRequest clientInHall -> check
		
	State check{
		println("smartbell | check")
		//temp
		//if [# temp > 37.5 #] replyTo clientInHall with tempNo("value too high")
		//else generate id; 
		replyTo clientInHall with tempOk: tempOk(temp)
		
		emit newClient : newClient(id)	
	} 
	Transition t1 
		whenMsg newClientWait -> sendTime
		
	State sendTime{
		println("smartbell | sendTime")
		forward client -m clientWait: clientWait(time)
	}
	Goto waiting
	
}



QActor client context ctxsmartbell{
	
	[# var Temp = 37#]
		State s0 initial{
			println("client | s0")
			//init temp=random 
			delay 2000
		}
		Goto checkTemp
		
		State checkTemp{
			println("client | checkTemp")
			//temperatura controllata tramite smartbell (messaggio a smartbell)
			//ok ricevo id, altrimenti fuori dal sistema
			delay 2000
			request smartbell -m clientInHall: clientInHall($Temp)
		}
		Transition t0 
			whenReply tempNo -> end
			whenReply tempOk -> waitingForWaiter
			
		State waitingForWaiter{
			println("client | waiting for waiter")
			//ricevo l'id
			//onmsg id=payload
			delay 2000			
		}
		Transition t1
			whenMsg clientWait -> waitingInHall
			
		
		State waitingInHall{
			println("client | waiting in hall")
			//ricevo il delaymax, 
			//onmsg delayMax=payload
			delay 2000
		}
		Transition t2
			whenMsg atTable -> waitingForOrdering
			
		
		State waitingForOrdering{
			println("client | waiting for ordering")
			delay 2000
			forward waiter -m callWaiter: AOOO
		}
		Transition t3 
			whenMsg waiterReady -> ordering
			
		State ordering{
			println("client | ordering")
			delay 2000
			forward waiter -m order: order(tea)
		}
		Goto waitingInTable 
		
		
		State waitingInTable{
			println("client | waitingInTable")
			delay 2000
			//aspetto finchÃ¨ non mi arriva il te'
		}
		Transition t4 
			whenMsg orderDelivered -> consuming
		
		State consuming{
			println("client | consuming")
			delay 10000
			//consumo il tÃ¨ e notifico con un evento che ho finito
			//oppure vengo escortato dal waiter ad andarmene se tempo>tmax
			emit endCons: endCons
		}
		Transition t5 
			whenEvent endCons -> paying
				
		State paying{
			println("client | paying")
			delay 2000
			//pago e vengo accompagnato all'uscita dal waiter
		}
		Transition t6
			whenMsg paymentOk ->  end
		
		State end{
			println("client | end")
			terminate 0
		}
			
}
