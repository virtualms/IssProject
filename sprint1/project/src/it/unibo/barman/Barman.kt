/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Barman		| starts")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						updateResourceRep( "waiting"  
						)
						println("Barman		| waiting")
					}
					 transition(edgeName="t00",targetState="makingTea",cond=whenEvent("makeTea"))
				}	 
				state("makingTea") { //this:State
					action { //it:State
						updateResourceRep( "makingTea"  
						)
						println("Barman 	| making tea")
						delay(4000) 
						if( checkMsgContent( Term.createTerm("makeTea(TEA,TABLE)"), Term.createTerm("TEA"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("teaReady", "teaReady(TEA,TABLE)" ) 
						}
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
