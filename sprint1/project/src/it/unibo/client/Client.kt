/* Generated by AN DISI Unibo */ 
package it.unibo.client

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Temp = 37 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("client | s0")
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="checkTemp", cond=doswitch() )
				}	 
				state("checkTemp") { //this:State
					action { //it:State
						println("client | checkTemp")
						delay(2000) 
						request("clientInHall", "clientInHall($Temp)" ,"smartbell" )  
					}
					 transition(edgeName="t02",targetState="end",cond=whenReply("tempNo"))
					transition(edgeName="t03",targetState="waitingForWaiter",cond=whenReply("tempOk"))
				}	 
				state("waitingForWaiter") { //this:State
					action { //it:State
						println("client | waiting for waiter")
						delay(2000) 
					}
					 transition(edgeName="t14",targetState="waitingInHall",cond=whenDispatch("clientWait"))
				}	 
				state("waitingInHall") { //this:State
					action { //it:State
						println("client | waiting in hall")
						delay(2000) 
					}
					 transition(edgeName="t25",targetState="waitingForOrdering",cond=whenDispatch("atTable"))
				}	 
				state("waitingForOrdering") { //this:State
					action { //it:State
						println("client | waiting for ordering")
						delay(2000) 
						forward("callWaiter", "AOOO" ,"waiter" ) 
					}
					 transition(edgeName="t36",targetState="ordering",cond=whenDispatch("waiterReady"))
				}	 
				state("ordering") { //this:State
					action { //it:State
						println("client | ordering")
						delay(2000) 
						forward("order", "order(tea)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="waitingInTable", cond=doswitch() )
				}	 
				state("waitingInTable") { //this:State
					action { //it:State
						println("client | waitingInTable")
						delay(2000) 
					}
					 transition(edgeName="t47",targetState="consuming",cond=whenDispatch("orderDelivered"))
				}	 
				state("consuming") { //this:State
					action { //it:State
						println("client | consuming")
						delay(10000) 
						emit("endCons", "endCons" ) 
					}
					 transition(edgeName="t58",targetState="paying",cond=whenEvent("endCons"))
				}	 
				state("paying") { //this:State
					action { //it:State
						println("client | paying")
						delay(2000) 
					}
					 transition(edgeName="t69",targetState="end",cond=whenDispatch("paymentOk"))
				}	 
				state("end") { //this:State
					action { //it:State
						println("client | end")
						terminate(0)
					}
				}	 
			}
		}
}
