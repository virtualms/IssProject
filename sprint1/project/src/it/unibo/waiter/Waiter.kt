/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var ARG = ""
				var WaitValue = 8000L
				var MaxTime = 15000L
				var dirtyTable = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("---waiter | s0")
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						updateResourceRep( "waiting"  
						)
						println("---waiter | wait")
						if(  dirtyTable != 0  
						 ){forward("dirtyTable", "dirtyTable(1)" ,"waiter" ) 
						}
						stateTimer = TimerActor("timer_wait", 
							scope, context!!, "local_tout_waiter_wait", WaitValue )
					}
					 transition(edgeName="t00",targetState="goHome",cond=whenTimeout("local_tout_waiter_wait"))   
					transition(edgeName="t01",targetState="clean",cond=whenDispatch("dirtyTable"))
					transition(edgeName="t02",targetState="client",cond=whenEvent("newClient"))
					transition(edgeName="t03",targetState="getOrder",cond=whenDispatch("callWaiter"))
					transition(edgeName="t04",targetState="serve",cond=whenEvent("teaReady"))
				}	 
				state("client") { //this:State
					action { //it:State
						updateResourceRep( "newClient"  
						)
						println("---waiter | client")
						if( checkMsgContent( Term.createTerm("newClient(ID)"), Term.createTerm("newClient(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												ARG = payloadArg(0)
								println("---waiter | NUOVO CLIENTE CON ID: $ARG (ma questo id come lo uso??)")
								forward("newClientWait", "newClientWait(0)" ,"smartbell" ) 
						}
					}
					 transition( edgeName="goto",targetState="enter", cond=doswitch() )
				}	 
				state("enter") { //this:State
					action { //it:State
						println("---waiter | enter")
						request("moveToEntrance", "ENTRANCE" ,"walker" )  
					}
					 transition(edgeName="t05",targetState="atEntrance",cond=whenReply("moveOk"))
				}	 
				state("atEntrance") { //this:State
					action { //it:State
						println("---waiter | atEntrance")
						request("moveToTable1", "TAVOLO1" ,"walker" )  
					}
					 transition(edgeName="t06",targetState="atTableFromEntrance",cond=whenReply("moveOk"))
				}	 
				state("atTableFromEntrance") { //this:State
					action { //it:State
						println("---waiter | atTableFromEntrance")
						delay(2000) 
						forward("atTable", "atTable(ok)" ,"client" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("getOrder") { //this:State
					action { //it:State
						updateResourceRep( "orderManagement"  
						)
						println("---waiter | getOrder")
						request("moveToTable1", "TAVOLO1" ,"walker" )  
					}
					 transition(edgeName="t17",targetState="waitingOrder",cond=whenReply("moveOk"))
				}	 
				state("waitingOrder") { //this:State
					action { //it:State
						println("---waiter | waitingOrder")
						forward("waiterReady", "waiterReady(OK)" ,"client" ) 
					}
					 transition(edgeName="t18",targetState="sendOrder",cond=whenDispatch("order"))
				}	 
				state("sendOrder") { //this:State
					action { //it:State
						println("---waiter | sendOrder")
						if( checkMsgContent( Term.createTerm("order(TEA)"), Term.createTerm("order(TEA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												ARG = payloadArg(0)
								println("---waiter | invio l'ordine del $ARG al barista")
								emit("makeTea", "makeTea($ARG,1)" ) 
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("serve") { //this:State
					action { //it:State
						updateResourceRep( "serving"  
						)
						println("---waiter | serve")
						request("moveToBarman", "BARMAN" ,"walker" )  
					}
					 transition(edgeName="t09",targetState="atBarman",cond=whenReply("moveOk"))
				}	 
				state("atBarman") { //this:State
					action { //it:State
						println("---waiter | atBarman")
						request("moveToTable1", "TAVOLO1" ,"walker" )  
					}
					 transition(edgeName="t010",targetState="atTableFromBarman",cond=whenReply("moveOk"))
				}	 
				state("atTableFromBarman") { //this:State
					action { //it:State
						println("---waiter | ordine portato al tavolo")
						forward("orderDelivered", "orderDelivered(OK)" ,"client" ) 
					}
					 transition( edgeName="goto",targetState="endOrder", cond=doswitch() )
				}	 
				state("endOrder") { //this:State
					action { //it:State
						println("---waiter | endOrder")
						stateTimer = TimerActor("timer_endOrder", 
							scope, context!!, "local_tout_waiter_endOrder", MaxTime )
					}
					 transition(edgeName="t011",targetState="askToCollect",cond=whenTimeout("local_tout_waiter_endOrder"))   
					transition(edgeName="t012",targetState="collect",cond=whenEvent("endCons"))
				}	 
				state("askToCollect") { //this:State
					action { //it:State
						println("---waiter | askToCollect")
						emit("endCons", "GOOUT" ) 
					}
					 transition( edgeName="goto",targetState="collect", cond=doswitch() )
				}	 
				state("collect") { //this:State
					action { //it:State
						updateResourceRep( "endClient"  
						)
						println("---waiter | collect")
						request("moveToTable1", "TAVOLO1" ,"walker" )  
						
									dirtyTable = dirtyTable + 1 
					}
					 transition(edgeName="t013",targetState="exit",cond=whenReply("moveOk"))
				}	 
				state("exit") { //this:State
					action { //it:State
						println("---waiter | exit")
						request("moveToExit", "EXIT" ,"walker" )  
					}
					 transition(edgeName="t014",targetState="endExit",cond=whenReply("moveOk"))
				}	 
				state("endExit") { //this:State
					action { //it:State
						println("---waiter | endExit")
						forward("paymentOK", "paymentOK" ,"client" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("clean") { //this:State
					action { //it:State
						updateResourceRep( "cleaning"  
						)
						println("---waiter | clean")
						request("moveToTable1", "TAVOLO1" ,"walker" )  
						delay(8000) 
						
									dirtyTable = dirtyTable - 1
					}
					 transition(edgeName="t015",targetState="wait",cond=whenReply("moveOk"))
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("---waiter | goHome")
						request("moveToHome", "HOME" ,"walker" )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
