/* Generated by AN DISI Unibo */ 
package it.unibo.smartbell

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Smartbell ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("smartbell | s0")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("smartbell | waiting")
					}
					 transition(edgeName="t00",targetState="check",cond=whenRequest("clientInHall"))
				}	 
				state("check") { //this:State
					action { //it:State
						println("smartbell | check")
						answer("clientInHall", "tempOk", "tempOk(temp)"   )  
						emit("newClient", "newClient(id)" ) 
					}
					 transition(edgeName="t11",targetState="sendTime",cond=whenDispatch("newClientWait"))
				}	 
				state("sendTime") { //this:State
					action { //it:State
						println("smartbell | sendTime")
						forward("clientWait", "clientWait(time)" ,"client" ) 
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
