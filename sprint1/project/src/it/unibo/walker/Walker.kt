/* Generated by AN DISI Unibo */ 
package it.unibo.walker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Walker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var X_home		= "0"
				var Y_home		= "0"
				
				var X_barman		= "5"
				var Y_barman		= "0"
		
				var X_entrancedoor  = "0"
				var Y_entrancedoor  = "4"
			
				var X_exitdoor      = "5"
				var Y_exitdoor      = "4"
		 
				var X_teatable1     = "2"
				var Y_teatable1     = "2"
		
				var X_teatable2     = "4"
				var Y_teatable2     = "2"	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("---walker | s0")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("---walker | wait")
					}
					 transition(edgeName="t016",targetState="moveToEntrance",cond=whenRequest("moveToEntrance"))
					transition(edgeName="t017",targetState="moveToTable1",cond=whenRequest("moveToTable1"))
					transition(edgeName="t018",targetState="moveToTable2",cond=whenRequest("moveToTable2"))
					transition(edgeName="t019",targetState="moveToBarman",cond=whenRequest("moveToBarman"))
					transition(edgeName="t020",targetState="moveToExit",cond=whenRequest("moveToExit"))
					transition(edgeName="t021",targetState="moveToHome",cond=whenRequest("moveToHome"))
				}	 
				state("moveToEntrance") { //this:State
					action { //it:State
						println("---walker | moveToEntrace")
						request("movetoCell", "movetoCell($X_entrancedoor,$Y_entrancedoor)" ,"waiterwalker" )  
					}
					 transition(edgeName="t022",targetState="respondEntrance",cond=whenReply("atcell"))
				}	 
				state("respondEntrance") { //this:State
					action { //it:State
						println("---walker | respondEntrance")
						answer("moveToEntrance", "moveOk", "OK"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("moveToTable1") { //this:State
					action { //it:State
						println("---walker | moveToTable1")
						request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
					}
					 transition(edgeName="t023",targetState="respondTeaTable1",cond=whenReply("atcell"))
				}	 
				state("respondTeaTable1") { //this:State
					action { //it:State
						println("---walker | respondTeaTable1")
						answer("moveToTable1", "moveOk", "OK"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("moveToTable2") { //this:State
					action { //it:State
						println("---walker | moveToTable2")
						request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
					}
					 transition(edgeName="t024",targetState="respondTeaTable2",cond=whenReply("atcell"))
				}	 
				state("respondTeaTable2") { //this:State
					action { //it:State
						println("---walker | respondTeaTable2")
						answer("moveToTable2", "moveOk", "OK"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("moveToBarman") { //this:State
					action { //it:State
						println("---walker | moveToBarman")
						request("movetoCell", "movetoCell($X_barman,$Y_barman)" ,"waiterwalker" )  
					}
					 transition(edgeName="t025",targetState="respondBarman",cond=whenReply("atcell"))
				}	 
				state("respondBarman") { //this:State
					action { //it:State
						println("---walker | respondBarman")
						answer("moveToBarman", "moveOk", "OK"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("moveToExit") { //this:State
					action { //it:State
						println("---walker | moveToExit")
						request("movetoCell", "movetoCell($X_exitdoor,$Y_exitdoor)" ,"waiterwalker" )  
					}
					 transition(edgeName="t026",targetState="respondExit",cond=whenReply("atcell"))
				}	 
				state("respondExit") { //this:State
					action { //it:State
						println("---walker | respondExit")
						answer("moveToExit", "moveOk", "OK"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						println("---walker | moveToHome")
						request("movetoCell", "movetoCell($X_home,$Y_home)" ,"waiterwalker" )  
					}
					 transition(edgeName="t027",targetState="respondHome",cond=whenReply("atcell"))
				}	 
				state("respondHome") { //this:State
					action { //it:State
						println("---walker | respondHome")
						answer("moveToHome", "moveOk", "OK"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
