System client

//MESSAGES

//from smartbell
Request enter: enter(TEMP) 
Reply tempNotOk : tempNotOk(OK)  
Reply tempOk : tempOk(TIME, ID)
 
//client-waiter
Dispatch endCons: endCons(ok) 

Request readyToOrder: readyToOrder(TABLE) 
Reply   atTable: atTable(TABLE) 

Dispatch order: order(TEA) 

Request readyToPay: readyToPay(TABLE) 
Dispatch moneyCollected: moneyCollected(AMOUNT) 

Context ctxclient ip [host="127.0.0.1" port=8040]
Context ctxwaiter ip [host="127.0.0.1" port=8040]
Context ctxsmartbell ip [host="127.0.0.1" port=8040]

ExternalQActor waiter context ctxwaiter
ExternalQActor smartbell context ctxsmartbell 

QActor client context ctxclient{
	
	[# var Temp #]
	
		State s0 initial{
			println("client | s0")
			//init temp=random 
			delay 2000
		}
		Goto checkTemp
		
		State checkTemp{
			println("client | checkTemp")
			//temperatura controllata tramite smartbell (messaggio a smartbell)
			//ok ricevo id, altrimenti fuori dal sistema
			delay 2000
			request smartbell -m enter: enter(37)
		}
		Transition t0 
			whenReply tempNotOk -> end
			whenReply tempOk -> waitingForWaiter
			
		State waitingForWaiter{
			println("client | waiting for waiter")
			//ricevo l'id
			//onmsg id=payload
			delay 2000			
		}
		Transition t1
			whenReply atTable -> waitingForOrdering
		
		State waitingForOrdering{
			println("client | waiting for ordering")
			delay 2000
			request waiter -m readyToOrder: readyToOrder(1)
		}
		Transition t3 
			whenReply atTable -> ordering
			
		State ordering{
			println("client | ordering")
			delay 2000
			forward waiter -m order: order(tea)
		}
		Goto waitingInTable 
		
		
		State waitingInTable{
			println("client | waitingInTable")
			delay 2000
			//aspetto finchÃ¨ non mi arriva il te'
		}
		Transition t4 
			whenMsg order -> consuming
		
		State consuming{
			println("client | consuming")
			delay 10000
			//consumo il tÃ¨ e notifico con un evento che ho finito
			//oppure vengo escortato dal waiter ad andarmene se tempo>tmax
			request waiter -m readyToPay: readyToPay(ok)
		}
		Transition t5 
			whenReply atTable -> paying
				
		State paying{
			println("client | paying")
			delay 2000
			
			//pago e vengo accompagnato all'uscita dal waiter
		}
		Transition t6
			whenMsg moneyCollected ->  end
		
		State end{
			println("client | end")
			terminate 0
		}
			
}
